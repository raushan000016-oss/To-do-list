import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;

class Task implements Serializable {
    private static final long serialVersionUID = 1L;
    private String title;
    private String description;
    private boolean completed;

    public Task(String title, String description) {
        this.title = title;
        this.description = description;
        this.completed = false;
    }

    // Getters and Setters
    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    public boolean isCompleted() { return completed; }
    public void setCompleted(boolean completed) { this.completed = completed; }

    @Override
    public String toString() {
        return (completed ? "[âœ“] " : "[ ] ") + title + " - " + description;
    }
}

public class ToDoList {
    private static final String FILE_NAME = "tasks.ser";
    private ArrayList<Task> tasks;
    private Scanner scanner;

    public ToDoList() {
        scanner = new Scanner(System.in);
        tasks = loadTasks();
    }

    public static void main(String[] args) {
        ToDoList app = new ToDoList();
        app.run();
    }

    public void run() {
        int choice;
        do {
            System.out.println("\n==== TO-DO LIST MENU ====");
            System.out.println("1. Add Task");
            System.out.println("2. View Tasks");
            System.out.println("3. Update Task");
            System.out.println("4. Delete Task");
            System.out.println("5. Mark Task Completed");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            choice = Integer.parseInt(scanner.nextLine());

            switch (choice) {
                case 1 -> addTask();
                case 2 -> viewTasks();
                case 3 -> updateTask();
                case 4 -> deleteTask();
                case 5 -> markTaskCompleted();
                case 6 -> saveTasks();
                default -> System.out.println("Invalid choice! Try again.");
            }
        } while (choice != 6);
        System.out.println("Exiting... Goodbye!");
    }

    private void addTask() {
        System.out.print("Enter task title: ");
        String title = scanner.nextLine();
        System.out.print("Enter task description: ");
        String description = scanner.nextLine();
        tasks.add(new Task(title, description));
        saveTasks();
        System.out.println("Task added successfully!");
    }

    private void viewTasks() {
        if (tasks.isEmpty()) {
            System.out.println("No tasks found!");
            return;
        }
        System.out.println("\n--- TASK LIST ---");
        int index = 1;
        for (Task task : tasks) {
            System.out.println(index++ + ". " + task);
        }
    }

    private void updateTask() {
        viewTasks();
        if (tasks.isEmpty()) return;

        System.out.print("Enter task number to update: ");
        int index = Integer.parseInt(scanner.nextLine()) - 1;
        if (index < 0 || index >= tasks.size()) {
            System.out.println("Invalid task number!");
            return;
        }

        Task task = tasks.get(index);
        System.out.print("Enter new title (leave blank to keep current): ");
        String title = scanner.nextLine();
        if (!title.isBlank()) task.setTitle(title);

        System.out.print("Enter new description (leave blank to keep current): ");
        String desc = scanner.nextLine();
        if (!desc.isBlank()) task.setDescription(desc);

        saveTasks();
        System.out.println("Task updated successfully!");
    }

    private void deleteTask() {
        viewTasks();
        if (tasks.isEmpty()) return;

        System.out.print("Enter task number to delete: ");
        int index = Integer.parseInt(scanner.nextLine()) - 1;
        if (index < 0 || index >= tasks.size()) {
            System.out.println("Invalid task number!");
            return;
        }

        tasks.remove(index);
        saveTasks();
        System.out.println("Task deleted successfully!");
    }

    private void markTaskCompleted() {
        viewTasks();
        if (tasks.isEmpty()) return;

        System.out.print("Enter task number to mark as completed: ");
        int index = Integer.parseInt(scanner.nextLine()) - 1;
        if (index < 0 || index >= tasks.size()) {
            System.out.println("Invalid task number!");
            return;
        }

        tasks.get(index).setCompleted(true);
        saveTasks();
        System.out.println("Task marked as completed!");
    }

    private void saveTasks() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            oos.writeObject(tasks);
        } catch (IOException e) {
            System.out.println("Error saving tasks: " + e.getMessage());
        }
    }

    private ArrayList<Task> loadTasks() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            return (ArrayList<Task>) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {
            return new ArrayList<>();
        }
    }
}
